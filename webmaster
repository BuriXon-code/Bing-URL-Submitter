#!/bin/bash

c0="\e[0m"
c1='\e[38;2;0;163;255m'
c2='\e[38;2;0;143;245m'
c3='\e[38;2;0;174;239m'
c4='\e[38;2;0;120;215m'
c5='\e[38;2;0;186;201m'
c6='\e[38;2;13;110;177m'
c7='\e[38;2;0;113;204m'
c8='\e[38;2;18;98;172m'
c9='\e[38;2;35;95;158m'
c10='\e[38;2;0;77;145m'
c11="\e[38;2;0;255;0m"
c12="\e[38;2;255;0;0m"

echo -e "\n${c1}▓▓▓${c2}▓▓▓${c3}▓▓▓${c4}▓▓▓${c5}▓▓▓${c6}▓▓▓${c7}▓▓▓${c8}▓▓▓${c9}▓▓▓${c10}▓▓▓${c11}▓▓▓${c12}▓▓▓"

echo -e "$c0\n"
echo -e "$c0      ${c1}+${c0} "
echo -e "$c0    ${c1}+++++; ${c0}"
echo -e "$c0    ${c1}+++++x+++${c0}           ${c1}Bing ${c2}Webmaster${c0}"
echo -e "$c0    ${c1}xxxx+x+x+++;${c0}        ${c1}URL ${c2}Submitter${c0}"
echo -e "$c0    ${c1}xxxxxxxxxxxx+${c0}       ${c1}by ${c11}BuriXon-code${c0}"
echo -e "$c0    ${c2}xx${c1}xxxxxxxxxxx+${c0}  "
echo -e "$c0    ${c2}xxxx${c1}xxxxxxxxx+${c0}  "
echo -e "$c0    ${c2}xxxxxx${c1}xxxxxxx+${c0}  "
echo -e "$c0    ${c2}xxxxxxxx${c1}xxxxx+${c0}  "
echo -e "$c0    ${c2}xxxxxxxxxx${c1}xxx+${c0}  "
echo -e "$c0    ${c2}xxxxxxxxxxxx${c1}xx   ${c3}+++++;  "
echo -e "$c0    ${c2}xxxxxxxxxxxxx${c1}x   ${c3}++++++++++   "
echo -e "$c0    ${c2}xxxxxxxxxxxxxx${c0}    ${c3}++++${c1}x+x+++++  "
echo -e "$c0    ${c2}xxxxxxxxxxxxxx${c0}     ${c3}+x+${c1}+x+++x+++++  "
echo -e "$c0    ${c2}xxxxxxxxxxxxxx${c0}     ${c3}++${c1}++x+xx++x+++++  "
echo -e "$c0    ${c2}xxxxxxxxxxxxxx${c0}      ${c3}+${c1}x+++x++x++++++;"
echo -e "$c0    ${c2}xxxxxxxxxxxxxx${c0}       ${c1}+x+x++++++++++${c5}+;"
echo -e "$c0    ${c4}xx${c2}xxxxxxxxxxxx${c0}        ${c1}++++xx++++${c5}+++;;;"
echo -e "$c0    ${c4}xxxx${c2}xxxxxxxxxx${c0}           ${c1}++++++${c5}+++;;;;"
echo -e "$c0    ${c6}xx${c4}xxxx${c2}xxxxxxxx${c0}               ${c5}xxx+;;;;;"
echo -e "$c0    ${c6}xXXxx${c4}XXxX${c2}xXxXx${c0}            ${c10}xxXXXSSX${c5}+;;;"
echo -e "$c0    ${c8}XXX${c6}XXXX${c4}XXXXXXx${c0}         ${c9}xxxxx${c10}xXXXXSS${c5}+;;"
echo -e "$c0    ${c8}XXXXXX${c6}XXXX${c4}XXXx${c0}      ${c2}xxxx${c4}xxx${c6}xx${c8}x${c10}XXXXSx${c5};;"
echo -e "$c0    ${c10}XX${c8}XXXXXXXXX${c10}XXx${c0}   ${c3}+xx${c2}xxxx${c4}xxx${c6}xx${c8}x${c10}xXXXXx${c5};"
echo -e "$c0    ${c5}x${c10}XSSSSSSSSSSSx${c5}+${c3}+++xx${c2}xxxx${c4}xxx${c6}xx${c8}x${c10}xXXXX  "
echo -e "$c0     ${c5};+${c10}SSSSSSSSx${c5}++${c3}++++xxx${c2}xxxx${c4}xxx${c6}xx${c8}x${c10}xXx "
echo -e "$c0      ${c5};;;;${c10}++++${c5};;+++${c3}+++xx${c2}xxxx${c4}xxx${c6}xx${c8}x${c10}xx "
echo -e "$c0       ${c5};;;;;;;;+++++${c3}++xxxx${c2}xxx${c4}xx${c6}x${c8}x  "
echo -e "$c0         ${c5};;;;;;++++++${c3}+xxxx${c2}xx${c4}x${c6}x   "
echo -e "$c0           ${c5};;;;;++++++${c3}xx${c2}xx   "
echo -e "$c0               ${c5};;++++++  "
echo -e "$c0\n"

# List of required commands
required_commands=("curl" "grep" "sed" "head" "xargs" "touch")

# Check if each command is available
for cmd in "${required_commands[@]}"; do
    if ! command -v "$cmd" &> /dev/null; then
        echo -e "${c12}Error:${c1} Command ${c5}$cmd${c1} is not installed or not available in the system." >&2
        exit 1
    fi
done

# Display help
show_help() {
	echo -e "${c11}$(basename $0)${c5} is a script for submitting URLs from sitemap to Bing Webmasters using the Webmasters API. It parses and submits URLs from sitemap.txt and sitemap.xml on its own. It submits 100 URLs at a time and caches them so that they are not submitted again at the next time.\n"
        echo -e "${c5}Usage:\n\n${c11}$(basename $0)${c9} [${c1}-u${c9}|${c1}--url${c3} URL${c9}] [${c1}-t${c9}|${c1}--token ${c3}TOKEN${c9}] [${c1}-n${c9}|${c1}--name${c3} SITEMAP_NAME${c9}]\n	  [${c1}-f${c9}|${c1}--file${c3} FILE${c9}]\n	  [${c1}-e${c9}|${c1}--env${c9}]\n          [${c1}-c${c9}|${c1}--count ${c3}COUNT${c9}]\n	  [${c1}-h${c9}|${c1}--help${c9}]\n\n"
        echo -e "${c5}Options:\n"
        echo -e " ${c11} -u${c9}, ${c11}--url     ${c5}Website URL (e.g., https://example.com/)"
	echo -e "                The URL should contain the prefix ${c1}http:// ${c5}|${c1} https://${c5} and (optionally) a${c1} /${c5} at the end."
        echo -e " ${c11} -t${c9}, ${c11}--token   ${c5}API Token (e.g., abc123)"
	echo -e "                You can generate the token in the bing webmaster panel at ${c1}https://www.bing.com/webmasters/${c5}."
        echo -e " ${c11} -n${c9}, ${c11}--name    ${c5}Sitemap file name (e.g., sitemap.xml)"
	echo -e "                The script can parse sitemap in ${c1}txt${c5} and simple${c1} xml${c5} format."
	echo -e " ${c11} -c${c9}, ${c11}--count   ${c5}Count of URL addresses to submit. Optional parameter."
	echo -e "                Default: ${c1}100${c5}."
        echo -e " ${c11} -f${c9}, ${c11}--file    ${c5}File with data (lines: URL, token, sitemap name)"
	echo -e "                The file used must have${c1} 3${c5} lines, containing the following: ${c1}verified URL${c5}, ${c1}API Token${c5}, ${c1}sitemap file name${c5}."
        echo -e " ${c11} -e${c9}, ${c11}--env     ${c5}Retrieve settings from exported environment variables"
	echo -e "                The variables must be named:${c1} \$SUBMIT_URL${c5},${c1} \$SUBMIT_API${c5},${c1} \$SUBMIT_SITEMAP${c5}."
        echo -e " ${c11} -h${c8}, ${c11}--help    ${c5}Displays help and usage."
	echo -e "${c0}"
}

# Settings
count="100"
url=""
token=""
sitemap_name=""
file_mode=false
env_mode=false
cache_file="$HOME/.bing_sent_urls.txt"

# Handling parameters
while [ "$1" != "" ]; do
        case $1 in
                -h | --help )
                        show_help
                        exit 0
                        ;;
                -u | --url )
                        shift
                        url=${1%/}
                        ;;
                -t | --token )
                        shift
                        token=$1
                        ;;
                -n | --name )
                        shift
                        sitemap_name=$1
                        ;;
		-c | --count)
			shift
			if [[ "$1" =~ ^[0-9]+$ ]]; then
				count="$1"
			else
				echo -e "${c12}Error:${c1} The value for ${c5}-c${c1}|${c5}--count must be integer!" >&2
			fi
			;;
                -f | --file )
                        shift
                        if $env_mode; then
                                echo -e "${c12}Error:${c1} Cannot combine ${c5}-e ${c1}/${c5} --env${c1} and${c5} -f${c1} /${c5} --file${c1} with other parameters.\n\n" >&2
                                show_help
                                exit 1
                        fi
                        file_mode=true
                        if [ -f "$1" ]; then
                                url=$(sed -n '1p' "$1" | tr -d '[:space:]')
                                token=$(sed -n '2p' "$1" | tr -d '[:space:]')
                                sitemap_name=$(sed -n '3p' "$1" | tr -d '[:space:]')
                        else
                                echo -e "${c12}Error:${c1} File not found:${c5} $1 ${c1}!" >&2
                                exit 1
                        fi
                        ;;
                -e | --env )
                        if $file_mode; then
                                echo -e "${c12}Error:${c1} Cannot combine ${c5}-e ${c1}/${c5} --env${c1} and${c5} -f${c1} /${c5} --file${c1} with other parameters.\n\n" >&2
                                show_help
                                exit 1
                        fi
                        env_mode=true
                        url=${SUBMIT_URL%/}
                        token=$SUBMIT_API
                        sitemap_name=$SUBMIT_SITEMAP
                        ;;
                * )
                        echo -e "${c12}Error:${c1} Unknown option:${c5} $1 ${c1}!\n\n" >&2
                        show_help
                        exit 1
                        ;;
        esac
        shift
done

# Conflict between -e / --env or -f / --file and other parameters
if { $file_mode || $env_mode; } && { [ -n "$url" ] || [ -n "$token" ] || [ -n "$sitemap_name" ]; } && ! $env_mode && ! $file_mode; then
        echo -e "${c12}Error:${c1} Cannot combine ${c5}-e ${c1}/${c5} --env${c1} and${c5} -f${c1} /${c5} --file${c1} with other parameters.\n\n" >&2
        show_help
        exit 1
fi

# Enforce providing all values when setting manually
if ! $file_mode && ! $env_mode && { [ -z "$url" ] || [ -z "$token" ] || [ -z "$sitemap_name" ]; }; then
        echo -e "${c12}Error:${c1} When setting manually, all parameters ${c5}-u${c1},${c5} -t${c1},${c5} -n${c1} must be provided.\n\n" >&2
        show_help
        exit 1
fi

# Fetch and process sitemap
url_list=$( curl -s "$url/$sitemap_name" | sed "s/<loc>/\n/g" | grep -i "http" | grep -v "sitemap" | cut -d "<" -f 1 )

# Load URLs from cache if file exists
if [ -f "$cache_file" ]; then
        sent_urls=$(cat "$cache_file")
else
        # Create the file if it doesn't exist
        touch "$cache_file"
        sent_urls=""
fi

# Filter URLs to skip those already sent
filtered_urls=$(echo "$url_list" | grep -vxFf "$cache_file" | head -n ${count})

if [ -z "$url_list" ]; then
        echo -e "${c12}Error:${c1} No URLs found in${c5} $sitemap_name${c1}.\n" >&2
        exit 1
fi

# Filtering URLs
json_data="{\"siteUrl\":\"$url\",\"urlList\":["
first=true
for link in $filtered_urls; do
        link=$(echo $link | xargs)
        if $first; then
                json_data="$json_data\"$link\""
                first=false
        else
                json_data="$json_data,\"$link\""
        fi
done
json_data="$json_data]}"

# Submit URLs
response=$(curl -s -X POST "https://ssl.bing.com/webmaster/api.svc/json/SubmitUrlbatch?apikey=$token" \
        -H "Content-Type: application/json; charset=utf-8" \
        -d "$json_data")

remain=$( curl -s "https://ssl.bing.com/webmaster/api.svc/json/GetUrlSubmissionQuota?siteUrl=${url}&apikey=${token}" | sed "s/\,/\n/g" | sed "s/\"//g" | grep -v -i bing | sed "s/}//g" | sed "s/Quota//g" | sed "s/:/ /g" | grep -v Error | sed "s/Message //g" )

# Formatted response
echo -e "\n${c5}Response:\n"

iffail() {
	echo -e "${c12}$response"  | \
	sed 's/\r//g' | \
	sed 's/\n//g' | \
	sed 's/\./,/' | \
	sed 's/,/,\n/' | \
	sed 's/\"//g' | \
	sed 's/{//g' | \
	sed 's/}//g' | \
	sed 's/\!\!\! /\n/g' | \
	sed 's/\! /,\n/g' | \
	sed 's/,//g'
	echo
}

ifdone(){

	# Save sent URLs to cache
	for url in $filtered_urls; do
	        echo "$url" >> "$cache_file"
	done

	echo -e "${c11}Successfully submitted!\n"
}

if [[ $response == '{"d":null}' ]]; then
        ifdone
	echo -e "${c5}Remaining:\n"
        echo -e "$c3$remain\n"
        exit 0
else
        iffail
	echo -e "${c5}Remaining:\n"
        echo -e "$c3$remain\n"
        exit 1
fi
